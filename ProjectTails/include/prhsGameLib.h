#pragma once

/*
	This version of the prhsGameLib.h file was last updated on January 4th, 2017.

	Version 1.1.0

	DO NOT EDIT THIS FILE
*/

#include "SDL.h"
#include "SDL_image.h"
#include "SDL_mixer.h"
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#undef main

class PRHS_Window; //The PRHS_Window class handles all image rendering, screen updating, and SDL_Texture creation.
class PRHS_Entity; //The PRHS_Entity class handles all position updating and collision checking.
class PRHS_SoundManager; //The PRHS_SoundManager class handles all audio and sound effects.

//A PRHS_Rect works the same as an SDL_Rect, but with the benefit of including a rotation field
struct PRHS_Rect {
	int x; //holds the x-coordinate of the upper left-hand corner of the entity
	int y; //holds the y-coordinate of the upper left-hand corner of the entity
	int w; //holds the width of the entity
	int h; //holds the height of the entity
	int r; //holds the rotation of the entity in degrees

	operator SDL_Rect() { return { x, y, w, h }; };
};

class SDLInit {
	struct SDL {
		SDL();
		~SDL();
		bool success = true;
	} sdl;
	struct Mixer {
		Mixer();
		~Mixer();
		bool success = true;
	} mixer;
	struct Image {
		Image();
		~Image();
		bool success = true;
	} image;
public:
	bool success = sdl.success && mixer.success && image.success;
};
extern SDLInit sdlStatus;

class PRHS_Window {
private:
	const double halfPI = 1.57079632679; //define PI for math calculations
	bool backgroundSet; //Is TRUE if the background image has been set

	int windowWidth; //Holds the width in pixels of the window
	int windowHeight; //Holds the height in pixels of the window
	bool fullscreen; //Is TRUE if the window is in fullscreen mode

	static SDL_Window* window;
	static SDL_Renderer* renderer;
	SDL_Texture* background;
	float scaleFactorX;
	float scaleFactorY;
	float backgroundScaleFactorX;
	float backgroundScaleFactorY;
public:
	PRHS_Window(const char* title, int width, int height, bool fullscreen); //Creates a window on the screen.
	virtual ~PRHS_Window(); //Cleans up when a window is destroyed.

	void render(SDL_Texture* source, PRHS_Rect location); //renders a texture on the screen at a given location with a given rotation.

	//void render(PRHS_Entity* sourceEntity); //renders an entity based on its internal skin, position, and rotation variables.
												   //NOTE: the renderSurface() method will not cause images to be displayed on the screen. To accomplish this use the updateDisplay() method.

	void updateDisplay(); //Draws rendered images onto the screen. Recommended to only call as often as the screen refresh rate (e.g. 60 times/second) in order to maximize efficiency.

	/*void refreshBackground(); //Redraws the entire background. Erases all images drawn on screen and fills it with the background image file.

	void refreshBackground(PRHS_Rect location); //Redraws the background in only a specified area.

	void refreshBackground(PRHS_Entity* sourceEntity); //Redraws the background around an entity based on its location and rotation variables.*/

	void setBackground(std::string pathToImage); //Sets the background image of the window. Generally called immediately after the constructor.

	int getHeight(); //Returns the height in pixels of the window.

	int getWidth(); //Returns the width in pixels of the window.

	SDL_Renderer* getRenderer(); //Returns the renderer used by the window. Used to create textures.

	SDL_Window* getWindow();

	static SDL_Texture* createTexture(std::string pathToImage); //returns an SDL_Texture* loaded from the given image file. Returns NULL if an error occurs.
};





enum PRHS_ENTITY_UPDATE_PARAMS {
	PRHS_UPDATE_ABSOLUTE = 0, //PRHS_UPDATE_ABSOLUTE indicates that the position of the entity will be set to the given SDL_Rect
	PRHS_UPDATE_RELATIVE = 1 //PRHS_UPDATE_RELATIVE indicates that the given SDL_Rect will be ADDED to the entity's current position
};

/*The entity class is intended to be extended into more specific subclasses with added functionality
while maintaining compatibility with the Window class*/
class PRHS_Entity {
	friend class PRHS_Window;
private:
	static void setRenderer(SDL_Renderer* windowRenderer); //A one time method to set the renderer used by the window. This is automatically called by the PRHS_Window constructor
public:
	PRHS_Entity() noexcept; //Creates an empty entity object.
	PRHS_Entity(SDL_Point location) noexcept; 
	PRHS_Entity(PRHS_Entity&& other) noexcept = default;
	PRHS_Entity(const PRHS_Entity& other) noexcept = default;

	virtual ~PRHS_Entity() = default; //Cleans up when an entity is destroyed.

	friend void swap(PRHS_Entity& lhs, PRHS_Entity& rhs) noexcept;

	SDL_Point position{ 0, 0 }; //holds the current position
	SDL_Point previousPosition{ 0, 0 };
};





//The PRHS_Effect is used within the PRHS_SoundManager class and should not need to be used by the programmer.
struct PRHS_Effect {
	Mix_Chunk* soundEffect; //Holds the sound data that will be played
	int channel;
	int volume;
};

//Handles all audio.
/*
	NOTE:
		All sounds that will be added using the addEffect() method must be .wav files
		All sounds that will be added using the setMainTrack() method or in the constructor must be .mp3 files
*/
class PRHS_SoundManager {
public:
	static const int sampleRate = 44100; //How much data will be read per second. More data = higher quality but lower performance
	static const int sampleSize = 4096; //How much of the sound file will be loaded into RAM at a time.
	static const int channels = 4; //Number of different sounds able to be played at a time

private:
	static bool wasInit; //Is TRUE if the PRHS_SoundManager has been initialized.
	static std::vector<PRHS_Effect> globalEffects; //Sound effects accessible from all PRHS_SoundManager objects.

	std::vector<PRHS_Effect> effects; //Local effects accessible from one PRHS_SoundManager object.
	Mix_Music* mainTrack; //The main background track
	int mainTrackVolume; //The volume of the main background track.
public:
	PRHS_SoundManager(); //Creates an empty PRHS_SoundManager object
	PRHS_SoundManager(std::string pathToMainTrack); //Automatically sets the main track to the given sound file.
	~PRHS_SoundManager(); //Cleans up sound data for individual PRHS_SoundManagers
	static void cleanUp(); //Cleans up the SDL_Mixer library. Only call this function when you will no longer use any SoundManager tools.

	//Each effect is assigned an index. Indexes are assigned based on order of addition.
	//The first effect added will have an index of 0, the second will have an index of 1, etc.
	int addEffect(std::string pathToEffect); //Adds a local sound effect from the given .wav file. Returns the index of the effect.
	void setEffectVolume(int index, int volume); //Sets the volume of the effect at the given index.
	void playEffect(int index); //Plays the effect at the given index.

	//Global effects are assigned indexes in the same way as local effects.
	static int addGlobalEffect(std::string pathToEffect); //Adds a global effect that may be accessed from any PRHS_SoundManager object. Returns the index of the effect.
	static void setGlobalEffectVolume(int index, int volume); //Sets the volume of the global effect at the given index.
	static void playGlobalEffect(int index); //Plays the effect at the given index.

	void setMainTrack(std::string pathToMainTrack); //Sets the main background track.
	void setMainTrackVolume(int volume); //Sets the volume of the main track (1 to 100)
	void playMainTrack(int times); //Plays the main track from the beginning the given number of times. Passing in -1 will play the music infinitely until it is stopped. Passing in 0 will play the music zero times... Duh...
	void pauseMainTrack(); //Stops the currently playing background track and saves it's place.
	void resumeMainTrack(); //Plays the background track from the last saved location.
	void stopMainTrack(); //Stops the currently playing background track and does not save it's place.
};




//Misc Functions
PRHS_Rect convertRect(SDL_Rect inputRect); //Converts the given SDL_Rect into a PRHS_Rect. Sets the rotation to zero.
SDL_Rect convertRect(PRHS_Rect inputRect); //Converts the given PRHS_Rect into an SDL_Rect. Drops the rotation.

struct PRHS_Controls {
	bool UP; //will be true if the "up arrow" key is pressed
	bool DOWN; //will be true if the "down arrow" key is pressed
	bool LEFT; //will be true if the "left arrow" key is pressed
	bool RIGHT; //will be true if the "right arrow" key is pressed
	bool BUTTON_1; //will be true if the "space" key is pressed
	bool BUTTON_2; //will be true if the "enter" key is pressed
	bool BUTTON_ESC; //will be true if the "esc" key is pressed
};

PRHS_Controls PRHS_GetControlState(); //allows access to user controls

void PRHS_Quit(); //cleans up the SDL and SDL_image libraries
